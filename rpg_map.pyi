# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum, auto

class Map:
    r"""
    A class representing a map.
    
    Parameters
    ----------
    bytes : List[int]
        The bytes of the image.
    width : int
        The width of the image.
    height : int
        The height of the image.
    grid_size : int
        The size of a single box in the grid defining how many map revealing points the map has.
        To see the grid visually, use the `with_grid` method.
    map_type : MapType
        The type of the map. Can be Hidden, Limited or Full.
    unlocked : List[Tuple[int, int]]
        The points that are unlocked on the map.
    special_points : List[Tuple[int, int]]
        The special points on the map. Used to draw the path.
    obstacles : List[List[List[Tuple[int, int]]]]
        The obstacles on the map. Used to draw the path.
    background : Optional[List[int]]
    
    Attributes
    ----------
    width : int
        The width of the map.
    height : int
        The height of the map.
    unlocked : List[Tuple[int, int]]
        The points that are unlocked on the map.
    """
    width: builtins.int
    height: builtins.int
    unlocked: builtins.list[tuple[builtins.int, builtins.int]]
    def __new__(cls,bytes:typing.Sequence[builtins.int], width:builtins.int, height:builtins.int, grid_size:builtins.int, map_type:MapType=..., unlocked:typing.Sequence[tuple[builtins.int, builtins.int]]=[], special_points:typing.Sequence[tuple[builtins.int, builtins.int]]=[], obstacles:typing.Sequence[typing.Sequence[tuple[builtins.int, builtins.int]]]=[]): ...
    @staticmethod
    def draw_background(bytes:typing.Sequence[builtins.int], background:typing.Sequence[builtins.int]) -> builtins.list[builtins.int]:
        r"""
        Draws the background image at every transparent pixel
        if the background is set
        """
        ...

    def with_dot(self, x:builtins.int, y:builtins.int, color:typing.Sequence[builtins.int], radius:builtins.int) -> Map:
        r"""
        Adds a dot do be drawn on the map when full_image or masked_image is called
        """
        ...

    def with_grid(self) -> Map:
        r"""
        Signal you want a grid to be drawn on the map as well
        """
        ...

    def with_obstacles(self) -> Map:
        r"""
        Signal you want obstacles to be drawn on the map as well
        """
        ...

    def unlock_point_from_coordinates(self, x:builtins.int, y:builtins.int) -> builtins.bool:
        r"""
        Takes in a coordinate, if it is close to an "unlocked" grid point
        it will unlock it and return true, if the point is already unlocked
        it will return false
        """
        ...

    def draw_path(self, travel:Travel, percentage:builtins.float, line_width:builtins.int, path_type:PathStyle=..., display_style:PathDisplayType=..., progress_display_type:PathProgressDisplayType=...) -> builtins.list[builtins.int]:
        r"""
        Draws a path from a travel struct onto the map with the specified style and percentage of the path drawn.
        """
        ...

    def full_image(self) -> builtins.list[builtins.int]:
        r"""
        Returns the full map
        """
        ...

    def masked_image(self) -> builtins.list[builtins.int]:
        r"""
        Returns the full map with a mask applied
        """
        ...

    def get_bits(self) -> builtins.list[builtins.int]:
        r"""
        Test
        """
        ...


class Travel:
    def __new__(cls,map:Map, current_location:tuple[builtins.int, builtins.int], destination:tuple[builtins.int, builtins.int]): ...
    @staticmethod
    def dbg_map(map:Map) -> builtins.list[builtins.int]:
        r"""
        Displays the map in a black and white view where white are the
        obstacles and black are the free spaces. This is to debug if
        a fault is with the pathfinding algorithm or the map reduction
        algorithm.
        """
        ...


class MapType(Enum):
    Hidden = auto()
    Limited = auto()
    Full = auto()

class PathDisplayType(Enum):
    Revealing = auto()
    BelowMask = auto()
    AboveMask = auto()

class PathProgressDisplayType(Enum):
    Remaining = auto()
    Travelled = auto()
    Progress = auto()

class PathStyle(Enum):
    Debug = auto()
    Dotted = auto()
    Solid = auto()
    SolidWithOutline = auto()
    DottedWithOutline = auto()

